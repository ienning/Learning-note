使用 Android Studio进行NDk开发
最近几天都在学习Android NDk开发，在网上搜索和一大堆教程，很多东西都有些太老了，初学者看得雲里雾里，而我也刚好先写一篇基础博客，方便刚刚接触的有些了解，下面开始正题
本文将讲解有以下几点
本文NDk开发流程图
还有在Android Studio 2.2版本中，我们可以在CMakeLists.txt文件中进行类似Android.mk文件的设置，而且cpp文件夹和jni的文件夹基本是一个含义。我们现在先采用ndk-build方法编译，而使用Cmake编译，可能会在下一篇博客中介绍

下载NDK，并在Android Studio 设置NDK快捷技巧
在使用 Android Studio 上tools 工具里找到Android 点击里面的Android SDK 去下载NDK，同时勾选CMake，和LLDB
下载完以后，我们直接在Android Studio 上设置ndk-build快捷方式

打开Settings，找到下图的Tools，External Tools 选项

ndk快捷方式step1

创建javah命令

创建javah 命令，用于在一个生成Java 类的头文件，之间出现在Jni目录下，自己不需要创建Jni目录，会在main 目录下自动创建生成文件，介绍Tools settings

program 是你的使用工具的目录，
Parameters 是你的程序后面的参数，下图意思是生成文件时UTF-8格式的
注意，要记得加 -classpath . 这个参数不然会出现
错误: 找不到 'com.example.HelloJni.HelloJni' 的类文件。
Working directory 是源文件路径，这里时Java源文件路径
ndk快捷方式step2

创建ndk-build命令

ndk-build不需要参数就可以编译，编译完后会在main目录下产生两个目录libs和obj
libs就是最终生成的so动态链接库
obj是中间过程文件，暂时不用考虑
ndk快捷方式step3

创建ndk-build clean命令

这个是清除原本使用的ndk-build命令
ndk快捷方式step4

创建 Jni
在利用上面的介绍的javah 快捷方法生成第一个java头文件，其中，该Java 类文件是声明了native 方法（偷懒一点，直接采用自带的native声明文件即MainActivity.java）

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
public class MainActivity extends AppCompatActivity {
    // Used to load the 'native-lib' library on application startup.
    static {
        System.loadLibrary("native-lib");
    }
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        // Example of a call to a native method
        TextView tv = (TextView) findViewById(R.id.sample_text);
        tv.setText(stringFromJNI());
    }
    /**
     * A native method that is implemented by the 'native-lib' native library,
     * which is packaged with this application.
     */
    public native String stringFromJNI();
}
右键点击该文件，找到ndk选项，选择javah就会自动生成该头文件了，头文件代码不贴了，然后生成的头文件后自己创建一个C/C++文件去实现.h文件中定义的函数，像下面这样，

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
//testThirdso.cpp
//
// Created by ienning on 16-11-20.
//
#include <stdio.h>
#include <jni.h>
#include "com_example_ienning_hellojni_MainActivity.h"
//这个函数同时是为了下面使用这个文件生成的so库后，让该so库作为第三方动态链接库时，测试该函数能否别调用。
char* testLib() {
    return "testLib";
}
JNIEXPORT jstring JNICALL Java_com_example_ienning_hellojni_MainActivity_stringFromJNI
(JNIEnv *env, jobject thzz) {
    return env->NewStringUTF(testLib());
}
编写Android.mk文件
先给代码

1
2
3
4
5
LOCAL_PATH := $(call my-dir)
include $(CLEAR_VARS)
LOCAL_MODULE := native-lib
LOCAL_SRC_FILES := testThirdso.cpp
include $(BUILD_SHARED_LIBRARY)
mk文件，现在就介绍几个简单的

LOCAL_PATH := $(call my-dir)
该文件开头都要定义一个这个，用于表明，当前文件路径
include $(CLEAR_VARS)
清除前面LOCAL_XXX的命令，因为这些命令都是全局命令，所以如果不清除，就会影响后面新的一块区域命令执行
LOCAL_MODULE := native-lib
这是生成的库文件的名字，最终文件名会自动在该名字前加上lib，然后根据后面build的命令，使用相应的拓展名
LOCAL_SRC_FILES := testThirdso.cpp
加载需要编译的文件名，然后 如果是多个文件名，向下面所示

1
2
LOCAL_SRC_FILES := helloa.cpp \
	hellob.cpp
include $(BUILD_SHARED_LIBRARY)
这个命令就是进行编译了，一般有3种编译
第一种是include $(BUILD_SHARED_LIBRARY)，生成我们需要的so库文件，动态共享库
第二种是include $(BUILD_STATIC)LIBRARY)，生成静态库即.a文件，它可以被我们通过Android.mk文件加载，生成我们需要的so库文件
第三种是include $(BUILD_EXECUTABLE)，生成可执行文件，它可以在我们的手机上独立地执行
编写完Android.mk文件后，在左侧的文件列表中右键点击main目录，选择NDK选项中的ndk-build，然后就可以生成.so动态文件库了，会出现obj和libs目录，然后运行我们的程序可以看到我们的结果。
在Android Studio 2.2版本中NDK编译有新方式，读者可以先学会这个老的方式，两个的学习难度都不大，我只是简单介绍一下而已。

第三方so动态链接库的调用以及第三方静态库的.a文件的调用
利用刚刚我们上面生成的动态库，我专门在刚刚的cpp文件里写了testLib函数就是为引用第三方动态库做准备，第三方动态库调用的方式一般有两种，一种是通过System.loadLibrary()，另外一种是通过dlopen方式调用;

创建一个新的module，调用.so动态库第一种方式

首先，我们创建一个新的module，命名为helloanotherjni。第三方动态库我们一般放在jniLibs文件里面，不过要在该文件创建相应的cpu型号所代表的文件夹，然后将我们调用的第三方不同cpu型号的so库文件，放进相应的文件夹里。这里我们怎么找到刚刚使用的第三方文件夹呢？在生成的jniLibs里，如果你没有指定产生那几个cpu类型文件，它们都会产生，还有一个目录地址也有这些生成的so库文件地址是<你的本机AndroidProject地址>/HelloJni/app/build/intermediates/transforms/stripDebugSymbol/debug/folders/2000/1f/main/lib，而且看so库文件是哪种类型cpu使用的可以使用
filecommand
它可以看到适合使用的cpu是多少位的，以及cpu类型
在这里先使用第一种方式调用第三方.so库，我们要注意的问题是，这里调用的第三方so库要有JNI接口提供给我们，否则我们无法使用so库，第三方提供的so库，如果我们要使用第一种方式，我们需要第三方提供相应的Java类时间他们的接口，或者提供Jni接口文档给我们，然后我们自己创建相应的Jni接口的java类。这里面的原因是jni方法中他们方法名前面还连有包名和类名(比如：Java_com_example_ienning_hellojni_MainActivity_stringFromJNI)，所以我们需要创建相应的包名和类名然后在该类中加入我们要调用的正确实现jni接口的方法，代码如下所示

1
2
3
4
5
6
7
8
9
10
11
12
13
 public class MainActivity {
    static {
        System.loadLibrary("native-lib");
    }
    public static String test() {
        //调用第三方so库的，要求这个动态库里有JNI可以调用时，
        //才可以使用System.loadLibrary()这种方法加载使用，不然就采取另外一种
        //另外一种方法是自己写一个JNI接口，然后通过dlopen()方法加载第三方so库
        Log.i("Ienning", "test: " + stringFromJNI());
        return "ok";
    }
    public native static String stringFromJNI();
}
这样我们第一种方法就完成了，不需要自己再创建一个第三方so库

调用.so动态链接库第二种方式

在调用动态链接库时，我们可以自己创建一个动态链接库来调用第三方动态链接库，网上大多数人都推荐使用这种方法，我自己也觉得这种方法很方便。这种方法可以调用没有实现JNI接口的函数，不多说，上代码

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
 #include "com_example_helloanotherjni_TestThirdSo.h"
 #include <dlfcn.h>
 #include <stdio.h>
JNIEXPORT jstring JNICALL Java_com_example_helloanotherjni_TestThirdSo_get
        (JNIEnv *env, jclass thiz) {
    void *handle = dlopen("/data/data/com.example.helloanotherjni/lib/libnative-lib.so", RTLD_NOW);
    if (!handle) {
        return env->NewStringUTF("not found your third so library");
    }
    char *(*testLib)() = NULL;
    testLib = (char *(*)()) dlsym(handle, "_Z7testLibv");
    if(!testLib)
    {
        return env->NewStringUTF("not found testThird method!");
    }
    return env->NewStringUTF(testLib());
}
在这里我们需要注意到一个问题，dlopen是手机上的绝对路径，我们自己生成的so库文件最后也会在这个文件目录中，它是该app安装后出的路径。然后要有一点要注意的是，dlsym中的第二个参数，它是我们要从第三方库中调用的方法名，当第三方提供给我们的是他们在cpp文件是写的函数，那么我们需要注意到，它在so库中真正的函数名，使用下面的命令可以查出。
testlib
查看到它在so库中的函数名，然后就使用该函数名。最后运行一下，就完成人了。
至于静态，可以在Android.mk文件中生成动态库，然后使用调用动态库，博主等下次写ndk开发时，会再写
[本篇博客完整代码的下载地址在完整代码下载地址](https://github.com/Iennings/NDKJni) 